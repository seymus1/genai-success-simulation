import numpy as npimport pandas as pdimport statsmodels.api as smimport matplotlib.pyplot as plt# 1. Simulation settingsnp.random.seed(42)n = 10000  # number of simulated respondents# 2. Simulate theme scores based on real survey valuesT1 = np.random.normal(4.1169, 0.2709, n)  # Theme 1: Ease of Use & LearnabilityT2 = np.random.normal(4.1240, 0.0910, n)  # Theme 2: System Efficiency & Learning BurdenT3 = np.random.normal(3.7100, 0.2160, n)  # Theme 3: Perceived Complexity & Integration# 3. Inverse-variance weightsw1 = 1 / (0.2709 ** 2)w2 = 1 / (0.0910 ** 2)w3 = 1 / (0.2160 ** 2)W_total = w1 + w2 + w3# 4. Compute Success Score with added realistic noiserandom_error = np.random.normal(0, 0.05, n)Success = (w1 * T1 + w2 * T2 + w3 * T3) / W_total + random_errorSuccess = np.clip(Success, 1, 5)  # Limit scores to Likert scale bounds# 5. Create DataFramedf = pd.DataFrame({    "Theme1": T1,    "Theme2": T2,    "Theme3": T3,    "Success_Score": Success})# 6. Descriptive statisticsprint("Descriptive Statistics of Success Score:\n")print(df["Success_Score"].describe())# 7. Run multiple linear regressionX = sm.add_constant(df[["Theme1", "Theme2", "Theme3"]])y = df["Success_Score"]model = sm.OLS(y, X).fit()print("\nRegression Summary:\n")print(model.summary())# 8. Optional: Visualize the distribution of Success Scoreplt.hist(df["Success_Score"], bins=50, color="cornflowerblue", edgecolor="black")plt.title("Simulated Success Score Distribution")plt.xlabel("Success Score")plt.ylabel("Frequency")plt.grid(True)plt.show()